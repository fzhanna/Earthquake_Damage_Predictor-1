mx <-as.data.frame( prcomp(dat)$x,
y=brca$y)
names(mx)
source('~/.active-rstudio-document', echo=TRUE)
mx <-as.data.frame( prcomp(dat)$x[,1:10],
type = brca$y)
mx$type
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean(train$y=="B")
mean(train_y=="B")
source('~/.active-rstudio-document', echo=TRUE)
mean(test_y=="B")
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(kmeans_preds, test_y)
kmeans_preds
factor(kmeans_preds, levels=levels(test_y)
)
source('~/.active-rstudio-document', echo=TRUE)
71/72
35/(43)
names(train_x)
train_x
dim(train_x)
source('~/.active-rstudio-document', echo=TRUE)
names(train)
source('~/.active-rstudio-document', echo=TRUE)
train$y
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preds
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preds<- predict(fit,test)
preds==test_y
mean(preds==test_y)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("loess")
install.packages("gam")
install.packages("gam")
install.packages("gam")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages(gam)
install.packages("gam")
install.packages("gam")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
train_glm$bestTune
source('~/.active-rstudio-document', echo=TRUE)
train_glm$bestTune
importance(train_glm)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
varImp(train_glm)
source('~/.active-rstudio-document', echo=TRUE)
varImp(train_glm)
source('~/.active-rstudio-document', echo=TRUE)
varImp(train_glm)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
xor(x1,x2)
cor(x1,x2)
length(x1)
source('~/.active-rstudio-document', echo=TRUE)
x1
mean(x1)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
rstudent(x1)
rstudent(x1,x2)
par(mfrow=c(2,2))
plot(fit)
3/100
length(x2)
3/101
rstudent(fit)
plot(rstudent(fit))
source('~/.active-rstudio-document', echo=TRUE)
names(Boston)
source('~/.active-rstudio-document', echo=TRUE)
names(Boston)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
?pairs
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
cor(Weekly[,-9])
install.packages(Gally)
install.packages("Gally")
?ggpairs
??ggpairs
??ggcorr
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
>>confusionMatrix
??confusionMatrix
source('~/.active-rstudio-document', echo=TRUE)
confusionMatrix(lda.pred$class, Direction.0910)
confusionMatrix(lda.pred$class, Direction.0910)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
median(Auto$mpg)
Auto$mpg
Auto$mpg > median(Auto$mpg)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
pairs(dat)
pairs(dat)
nrow(dat)
ncol(dat)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
names(train)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preds
test$mpg01
preds
source('~/.active-rstudio-document', echo=TRUE)
mpg01
preds
source('~/.active-rstudio-document', echo=TRUE)
summary(preds)
source('~/.active-rstudio-document', echo=TRUE)
fit
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preds
source('~/.active-rstudio-document', echo=TRUE)
fit
source('~/.active-rstudio-document', echo=TRUE)
nrow(train)
nrow(test)
source('~/.active-rstudio-document', echo=TRUE)
nrow(test)
tr_ind
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
preds
source('~/.active-rstudio-document', echo=TRUE)
preds
source('~/.active-rstudio-document', echo=TRUE)
preds
?knn3
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
fit
preds
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
train[cylinders,weight,displacement]
train[cylinders]
train %>% select(cylinders, weight, displacement)
train %>% select(c(cylinders, weight, displacement))
train %>% pull(cylinders, weight, displacement)
train %>% select(cylinders, weight, displacement)
names(train)
source('~/.active-rstudio-document', echo=TRUE)
train %>% select(-cylinders)
my_data %>% pull(Species)
my_data %>% pull(cylinders)
class(train)
train %>% select(cylinders, weight, displacement)
source('~/.active-rstudio-document', echo=TRUE)
train %>% select(cylinders, weight, displacement)
train %>% dplyr::select(cycliners)
train %>% dplyr::select(cylinders)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
SUMMARY(FIT)
summmary(fit)
summary(fit)
summary(fit)$coeff
summary(fit)$coeff$Std
summary(fit)$coef
summary(fit)$coef[,2]
install.packages("boot")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
summary(fit)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
Weekly[1]
Weekly[1,]
Weekly[1,Direction]
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean(ans)
source('~/.active-rstudio-document', echo=TRUE)
mean(ans)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
mean(ans)
levels(Weekly$Direction)
as.numeric(levels(Weekly$Direction))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
sqrt(mean(ans))
source('~/.active-rstudio-document', echo=TRUE)
g(1)
source('~/.active-rstudio-document', echo=TRUE)
g(1)
g(2)
g(3)
g(4)
source('~/.active-rstudio-document', echo=TRUE)
g(4)
source('~/.active-rstudio-document', echo=TRUE)
g(4)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
f(4)
f(1)
f(2)
f(3)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
u_hat
source('~/.active-rstudio-document', echo=TRUE)
u_se
u_hat
source('~/.active-rstudio-document', echo=TRUE)
u_hat
u_hat
u_se
source('~/.active-rstudio-document', echo=TRUE)
str(valFull)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
str(valFull)
model.Logistic <- glm(damage_grade ~ ., family='binomial', valFull[1:100,] )
model.Logistic <- glm(damage_grade ~ ., family='binomial', valFull )
model.Logistic <- glm(damage_grade ~ ., family='binomial')
prediction <- predict(model.Logistic, valFull)
accuracy <- mean(prediction == valFull$damage_grade)
model.Logistic <- glm(damage_grade ~ ., family='binomial', valFull)
prediction <- predict(model.Logistic, valFull)
accuracy <- mean(prediction == valFull$damage_grade)
accuracy
prediction
model.Logistic <- glm(as.factor(damage_grade) ~ ., family='binomial', valFull)
prediction <- predict(model.Logistic, valFull)
accuracy <- mean(prediction == valFull$damage_grade)
accuracy
prediction
model.Logistic <- glm(as.factor(damage_grade) ~ ., family='binomial', valFull)
prediction <- predict(model.Logistic, valFull, type="response")
accuracy <- mean(prediction == valFull$damage_grade)
accuracy
prediction
valFull$damage_grade
model.Multinom <- multinom(as.factor(damage_grade) ~ ., valFull)
prediction <- predict(model.Multinom, valFull, type="response")
accuracy <- mean(prediction == valFull$damage_grade)
library(nnet)
model.Multinom <- multinom(as.factor(damage_grade) ~ ., valFull)
prediction <- predict(model.Multinom, valFull, type="response")
accuracy <- mean(prediction == valFull$damage_grade)
prediction <- predict(model.Multinom, valFull)
prediction
accuracy <- mean(prediction == valFull$damage_grade)
accuracy
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
accuracy
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
accuracy
barplot(prediction)
prediction
class(prediction)
length(prediction)
barplot(rbind(table(prediction), table(valFull$damage_grade)))
barplot(rbind(table(prediction), table(valFull$damage_grade)), beside=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
accuracy
predictionsVal
class(predictionsVal)
names(predictionsVal)
(predictionsVal$class)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
accuracy
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
accuracy
scale(trainFull)
scale(model.matrix(trainFull))
model.matrix(as.factor(damage_grade)~.,valFull)
model.matrix(as.factor(damage_grade)~.,valFull) %>% dim()
model.matrix(as.factor(damage_grade)~.,valFull) %>% names()
model.matrix(as.factor(damage_grade)~.,valFull) %>% head()
model.matrix(as.factor(damage_grade)~.,valFull)$has_secondary_use_other
model.matrix(as.factor(damage_grade)~.,valFull)  %>% as.data.frame()
model.matrix(as.factor(damage_grade)~.,valFull)  %>% as.data.frame() %>% head()
model.matrix(as.factor(damage_grade)~.,valFull)  %>% as.data.frame() %>% names()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
head(X)
nrow(X)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
X[1:ntrain,] == train
all(X[1:ntrain,] == train)
all(X[ntrain+1:nval,] == val)
all(X[ntrain+1:nval+ntrain,] == val)
all(X[ntrain+1:)nval+ntrain),] == val)
all(X[ntrain+1:(nval+ntrain),] == val)
all(X[(1:nval) + ntrain ,] == val)
all(X[(1:nval) + ntrain-1 ,] == val)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
all(testProcessed == test)
all(trainProcessed == train)
all(valProcessed == val)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
dummyVars(" ~ .", data = valLab)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
install.packages("mltools")
one_hot(valLab)
library(mltools)
one_hot(valLab)
mltools::one_hot(valLab)
valLab
class(valLab)
class(valLab$damage_grade)
class(valLab$building_id)
one_hot(valLab$damage_grade)
one_hot(valLab$damage_grade) %>% class(0)
one_hot(valLab$damage_grade) %>% class()
library(caret)
dummyVars(" ~ .", data = valLab)
dummyVars(~ ., data = valLab)
dummyVars(" ~ .", data = valLab)
predict(dummyVars(" ~ .", data = valLab), valLab)
predict(dummyVars(" ~ .", data = valLab), valLab) %>% names()
predict(dummyVars(" ~ .", data = valLab), valLab) %>% as.data.frame() %>% names()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
valLab
trainLab
X[(1:nval) + ntrain ,] %>% as.data.frame()
inner_join(X[(1:nval) + ntrain ,] %>% as.data.frame() , valLab)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
valLab
names(valLab)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
names(trainProcessed)
names(trainLab)
trainLab
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
names(trainProcessed)
names(valProcessed)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
names(valProcessed)
names(trainProcessed)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
names(trainProcessed)
names(valProcessed)
names(testProcessed)
names(trainProcessed)
nn <- neuralnet(damage_grade.1 + damage_grade.2 + damage_grade.3 ~. -building_id,
data = trainProcessed,
hidden = c(13, 10, 3),
act.fct = "logistic",
linear.output = FALSE,
lifesign = "minimal")
install.packages("neuralnet")
library(neuralnet)
nn <- neuralnet(damage_grade.1 + damage_grade.2 + damage_grade.3 ~. -building_id,
data = trainProcessed,
hidden = c(13, 10, 3),
act.fct = "logistic",
linear.output = FALSE,
lifesign = "minimal")
names(testProcessed)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
names(testProcessed)
names(trainProcessed)
trainProcessed$damage_grade.1
head(trainProcessed)
head(trainProcessed)
trainLab
inner_join(X[1:ntrain,] %>% as.data.frame(), trainLab)
class(trainLab$building_id)
trainLab$building_id
X[1:ntrain,] %>% as.data.frame()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
trainProcessed
data.frame(X[1:ntrain,])
data.frame(X[1:ntrain,]) %>% head()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
nrow(trainProcessed)
X
data.frame(X) %>% head()
data.frame(X) %>% names() %>% length()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
nrow(trainProcessed)
nrow(valProcessed)
ntrain
nn <- neuralnet(damage_grade.1 + damage_grade.2 + damage_grade.3 ~. -building_id,
data = trainProcessed,
hidden = c(13, 10, 3),
act.fct = "logistic",
linear.output = FALSE,
lifesign = "minimal")
nn <- neuralnet(damage_grade.1 + damage_grade.2 + damage_grade.3 ~. -building_id,
data = trainProcessed,threshold = 0.0001,
hidden = c(13, 10, 3),
act.fct = "logistic",
linear.output = FALSE,
lifesign = "minimal")
names(trainProcessed)
f <- as.formula(paste("l1 + l2 + l3 ~", paste(n[!n %in% c("l1","l2","l3")], collapse = " + ")))
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
nn <- neuralnet(f,
data = trainProcessed,
hidden = c(13, 10, 3),threshold = 0.0001,
act.fct = "tanh",
linear.output = FALSE,
lifesign = "minimal")
summary(trainProcessed)
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
sapply(trainProcessed, function(x) sum(is.na(x)))
sapply(trainProcessed, function(x) sum(is.na(x))) %>% sum()
source('~/Earthquake_Damage_Predictor/LinearModels.R', echo=TRUE)
